'use client';

import { useState } from 'react';

export interface FilterState {
  budget: string;
  duration: string;
  companions: string;
  interests: string[];
  region: string;
}

interface FilterButtonsProps {
  filters: FilterState;
  onFilterChange: (filters: FilterState) => void;
}

const budgetOptions = [
  { value: 'under_50000', label: '5ÎßåÏõê Ïù¥Ìïò', icon: 'üí∞' },
  { value: '50000_100000', label: '5-10ÎßåÏõê', icon: 'üíµ' },
  { value: '100000_200000', label: '10-20ÎßåÏõê', icon: 'üí∏' },
  { value: 'over_200000', label: '20ÎßåÏõê Ïù¥ÏÉÅ', icon: 'üíé' }
];

const durationOptions = [
  { value: 'half_day', label: 'Î∞òÎÇòÏ†à', icon: 'üåÖ' },
  { value: 'one_day', label: 'ÎãπÏùº', icon: '‚òÄÔ∏è' },
  { value: 'two_days', label: '1Î∞ï 2Ïùº', icon: 'üåô' },
  { value: 'three_days', label: '2Î∞ï 3Ïùº', icon: 'üåü' },
  { value: 'long_term', label: '3Î∞ï Ïù¥ÏÉÅ', icon: 'üèñÔ∏è' }
];

const companionOptions = [
  { value: 'solo', label: 'ÌòºÏûê', icon: 'üö∂‚Äç‚ôÇÔ∏è' },
  { value: 'couple', label: 'Ïó∞Ïù∏', icon: 'üíï' },
  { value: 'friends', label: 'ÏπúÍµ¨Îì§', icon: 'üë•' },
  { value: 'family', label: 'Í∞ÄÏ°±', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' }
];

const interestOptions = [
  { value: 'nature', label: 'ÏûêÏó∞', icon: 'üåø' },
  { value: 'culture', label: 'Î¨∏Ìôî', icon: 'üèõÔ∏è' },
  { value: 'food', label: 'ÎßõÏßë', icon: 'üçú' },
  { value: 'cafe', label: 'Ïπ¥Ìéò', icon: '‚òï' },
  { value: 'photo', label: 'Ìè¨ÌÜ†Ïä§Ìåü', icon: 'üì∏' },
  { value: 'activity', label: 'Ïï°Ìã∞ÎπÑÌã∞', icon: 'üèÉ‚Äç‚ôÇÔ∏è' },
  { value: 'healing', label: 'ÌûêÎßÅ', icon: 'üßò‚Äç‚ôÄÔ∏è' },
  { value: 'shopping', label: 'ÏáºÌïë', icon: 'üõçÔ∏è' }
];

const regionOptions = [
  { value: 'seoul', label: 'ÏÑúÏö∏', icon: 'üèôÔ∏è' },
  { value: 'busan', label: 'Î∂ÄÏÇ∞', icon: 'üåä' },
  { value: 'gangwon', label: 'Í∞ïÏõêÎèÑ', icon: '‚õ∞Ô∏è' },
  { value: 'gyeonggi', label: 'Í≤ΩÍ∏∞ÎèÑ', icon: 'üèòÔ∏è' },
  { value: 'jeju', label: 'Ï†úÏ£ºÎèÑ', icon: 'üå∫' },
  { value: 'gyeongsang', label: 'Í≤ΩÏÉÅÎèÑ', icon: 'üèØ' },
  { value: 'jeolla', label: 'Ï†ÑÎùºÎèÑ', icon: 'üåæ' },
  { value: 'chungcheong', label: 'Ï∂©Ï≤≠ÎèÑ', icon: 'üå∏' }
];

export default function FilterButtons({ filters, onFilterChange }: FilterButtonsProps) {
  const [expandedSections, setExpandedSections] = useState({
    budget: true,
    duration: true,
    companions: true,
    interests: false,
    region: false
  });

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleSingleSelect = (key: keyof FilterState, value: string) => {
    if (key === 'interests') return; // interestsÎäî Îã§Ï§ë ÏÑ†ÌÉùÏù¥ÎØÄÎ°ú Ï†úÏô∏
    
    onFilterChange({
      ...filters,
      [key]: filters[key] === value ? '' : value
    });
  };

  const handleMultiSelect = (value: string) => {
    const currentInterests = filters.interests;
    const newInterests = currentInterests.includes(value)
      ? currentInterests.filter(item => item !== value)
      : [...currentInterests, value];
    
    onFilterChange({
      ...filters,
      interests: newInterests
    });
  };

  const clearFilters = () => {
    onFilterChange({
      budget: '',
      duration: '',
      companions: '',
      interests: [],
      region: ''
    });
  };

  const hasActiveFilters = Object.values(filters).some(value => 
    Array.isArray(value) ? value.length > 0 : value !== ''
  );

  return (
    <div className="space-y-4">
      
      {/* Clear Button */}
      {hasActiveFilters && (
        <button
          onClick={clearFilters}
          className="w-full py-2 px-3 text-sm text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
        >
          üóëÔ∏è ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
        </button>
      )}

      {/* Budget Section */}
      <div className="border border-gray-200 rounded-lg">
        <button
          onClick={() => toggleSection('budget')}
          className="w-full p-3 text-left flex items-center justify-between hover:bg-gray-50 rounded-t-lg"
        >
          <span className="font-medium text-gray-800">üí∞ ÏòàÏÇ∞</span>
          <span className={`transform transition-transform ${expandedSections.budget ? 'rotate-180' : ''}`}>
            ‚ñº
          </span>
        </button>
        
        {expandedSections.budget && (
          <div className="p-3 pt-0 grid grid-cols-1 gap-2">
            {budgetOptions.map(option => (
              <button
                key={option.value}
                onClick={() => handleSingleSelect('budget', option.value)}
                className={`p-2 text-sm rounded-md text-left transition-colors ${
                  filters.budget === option.value
                    ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                {option.icon} {option.label}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Duration Section */}
      <div className="border border-gray-200 rounded-lg">
        <button
          onClick={() => toggleSection('duration')}
          className="w-full p-3 text-left flex items-center justify-between hover:bg-gray-50 rounded-t-lg"
        >
          <span className="font-medium text-gray-800">‚è∞ Í∏∞Í∞Ñ</span>
          <span className={`transform transition-transform ${expandedSections.duration ? 'rotate-180' : ''}`}>
            ‚ñº
          </span>
        </button>
        
        {expandedSections.duration && (
          <div className="p-3 pt-0 grid grid-cols-1 gap-2">
            {durationOptions.map(option => (
              <button
                key={option.value}
                onClick={() => handleSingleSelect('duration', option.value)}
                className={`p-2 text-sm rounded-md text-left transition-colors ${
                  filters.duration === option.value
                    ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                {option.icon} {option.label}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Companions Section */}
      <div className="border border-gray-200 rounded-lg">
        <button
          onClick={() => toggleSection('companions')}
          className="w-full p-3 text-left flex items-center justify-between hover:bg-gray-50 rounded-t-lg"
        >
          <span className="font-medium text-gray-800">üë• ÎèôÌñâ</span>
          <span className={`transform transition-transform ${expandedSections.companions ? 'rotate-180' : ''}`}>
            ‚ñº
          </span>
        </button>
        
        {expandedSections.companions && (
          <div className="p-3 pt-0 grid grid-cols-2 gap-2">
            {companionOptions.map(option => (
              <button
                key={option.value}
                onClick={() => handleSingleSelect('companions', option.value)}
                className={`p-2 text-sm rounded-md text-center transition-colors ${
                  filters.companions === option.value
                    ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div>{option.icon}</div>
                <div className="text-xs mt-1">{option.label}</div>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Interests Section */}
      <div className="border border-gray-200 rounded-lg">
        <button
          onClick={() => toggleSection('interests')}
          className="w-full p-3 text-left flex items-center justify-between hover:bg-gray-50 rounded-t-lg"
        >
          <span className="font-medium text-gray-800">
            ‚ù§Ô∏è Í¥ÄÏã¨ÏÇ¨ 
            {filters.interests.length > 0 && (
              <span className="ml-2 inline-flex items-center justify-center w-5 h-5 text-xs bg-indigo-100 text-indigo-700 rounded-full">
                {filters.interests.length}
              </span>
            )}
          </span>
          <span className={`transform transition-transform ${expandedSections.interests ? 'rotate-180' : ''}`}>
            ‚ñº
          </span>
        </button>
        
        {expandedSections.interests && (
          <div className="p-3 pt-0 grid grid-cols-2 gap-2">
            {interestOptions.map(option => (
              <button
                key={option.value}
                onClick={() => handleMultiSelect(option.value)}
                className={`p-2 text-sm rounded-md text-center transition-colors ${
                  filters.interests.includes(option.value)
                    ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div>{option.icon}</div>
                <div className="text-xs mt-1">{option.label}</div>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Region Section */}
      <div className="border border-gray-200 rounded-lg">
        <button
          onClick={() => toggleSection('region')}
          className="w-full p-3 text-left flex items-center justify-between hover:bg-gray-50 rounded-t-lg"
        >
          <span className="font-medium text-gray-800">üìç ÏßÄÏó≠</span>
          <span className={`transform transition-transform ${expandedSections.region ? 'rotate-180' : ''}`}>
            ‚ñº
          </span>
        </button>
        
        {expandedSections.region && (
          <div className="p-3 pt-0 grid grid-cols-2 gap-2">
            {regionOptions.map(option => (
              <button
                key={option.value}
                onClick={() => handleSingleSelect('region', option.value)}
                className={`p-2 text-sm rounded-md text-center transition-colors ${
                  filters.region === option.value
                    ? 'bg-indigo-100 text-indigo-700 border border-indigo-300'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div>{option.icon}</div>
                <div className="text-xs mt-1">{option.label}</div>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Active Filters Summary */}
      {hasActiveFilters && (
        <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
          <h4 className="text-sm font-medium text-blue-800 mb-2">ÏÑ†ÌÉùÎêú Ï°∞Í±¥:</h4>
          <div className="space-y-1 text-xs text-blue-700">
            {filters.budget && <div>üí∞ {budgetOptions.find(opt => opt.value === filters.budget)?.label}</div>}
            {filters.duration && <div>‚è∞ {durationOptions.find(opt => opt.value === filters.duration)?.label}</div>}
            {filters.companions && <div>üë• {companionOptions.find(opt => opt.value === filters.companions)?.label}</div>}
            {filters.region && <div>üìç {regionOptions.find(opt => opt.value === filters.region)?.label}</div>}
            {filters.interests.length > 0 && (
              <div>‚ù§Ô∏è {filters.interests.map(interest => 
                interestOptions.find(opt => opt.value === interest)?.label
              ).join(', ')}</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}