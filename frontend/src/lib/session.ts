// ============================================================================
// ÏÑ∏ÏÖò Í¥ÄÎ¶¨ Ïú†Ìã∏Î¶¨Ìã∞
// ÌååÏùº: frontend/src/lib/session.ts (ÏÉàÎ°ú ÏÉùÏÑ±)
// ============================================================================

// Î∏åÎùºÏö∞Ï†Ä ÏÑ∏ÏÖò ID ÏÉùÏÑ± Î∞è Í¥ÄÎ¶¨
export class SessionManager {
    private static readonly SESSION_KEY = 'zeroplay_session_id';
    private static readonly SESSION_EXPIRY_KEY = 'zeroplay_session_expiry';
    private static readonly SESSION_DURATION = 30 * 24 * 60 * 60 * 1000; // 30Ïùº
  
    /**
     * ÏÑ∏ÏÖò ID Í∞ÄÏ†∏Ïò§Í∏∞ (ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±)
     */
    static getSessionId(): string {
      if (typeof window === 'undefined') return '';
      
      let sessionId = localStorage.getItem(this.SESSION_KEY);
      const expiry = localStorage.getItem(this.SESSION_EXPIRY_KEY);
      
      // ÏÑ∏ÏÖòÏù¥ ÏóÜÍ±∞ÎÇò ÎßåÎ£åÎêú Í≤ΩÏö∞ ÏÉàÎ°ú ÏÉùÏÑ±
      if (!sessionId || !expiry || Date.now() > parseInt(expiry)) {
        sessionId = this.generateSessionId();
        this.setSession(sessionId);
      }
      
      return sessionId;
    }
  
    /**
     * ÏÉà ÏÑ∏ÏÖò ID ÏÉùÏÑ±
     */
    private static generateSessionId(): string {
      const timestamp = Date.now().toString(36);
      const randomPart = Math.random().toString(36).substring(2, 15);
      const additionalRandom = Math.random().toString(36).substring(2, 9);
      
      return `session_${timestamp}_${randomPart}_${additionalRandom}`;
    }
  
    /**
     * ÏÑ∏ÏÖò ÏÑ§Ï†ï
     */
    private static setSession(sessionId: string): void {
      if (typeof window === 'undefined') return;
      
      const expiryTime = Date.now() + this.SESSION_DURATION;
      
      localStorage.setItem(this.SESSION_KEY, sessionId);
      localStorage.setItem(this.SESSION_EXPIRY_KEY, expiryTime.toString());
    }
  
    /**
     * ÏÑ∏ÏÖò ÌÅ¥Î¶¨Ïñ¥
     */
    static clearSession(): void {
      if (typeof window === 'undefined') return;
      
      localStorage.removeItem(this.SESSION_KEY);
      localStorage.removeItem(this.SESSION_EXPIRY_KEY);
    }
  
    /**
     * ÏÑ∏ÏÖò Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
     */
    static isValidSession(sessionId: string): boolean {
      if (!sessionId || sessionId.length < 10) return false;
      
      const expiry = localStorage.getItem(this.SESSION_EXPIRY_KEY);
      if (!expiry || Date.now() > parseInt(expiry)) return false;
      
      return true;
    }
  
    /**
     * ÏÑ∏ÏÖò Ïó∞Ïû•
     */
    static extendSession(): void {
      const sessionId = this.getSessionId();
      if (sessionId) {
        this.setSession(sessionId);
      }
    }
  
    /**
     * ÏÑ∏ÏÖò Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
     */
    static getSessionInfo(): { sessionId: string; expiryDate: Date | null; isValid: boolean } {
      const sessionId = this.getSessionId();
      const expiry = localStorage.getItem(this.SESSION_EXPIRY_KEY);
      
      return {
        sessionId,
        expiryDate: expiry ? new Date(parseInt(expiry)) : null,
        isValid: this.isValidSession(sessionId)
      };
    }
  
    /**
     * ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ï∂úÎ†•
     */
    static debug(): void {
      if (typeof window === 'undefined') return;
      
      const info = this.getSessionInfo();
      console.log('üîç Session Debug Info:', {
        sessionId: info.sessionId,
        expiryDate: info.expiryDate?.toLocaleString(),
        isValid: info.isValid,
        timeUntilExpiry: info.expiryDate ? 
          Math.round((info.expiryDate.getTime() - Date.now()) / (1000 * 60 * 60)) + ' hours' : 
          'N/A'
      });
    }
  }